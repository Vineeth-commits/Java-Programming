Chapter 1 - The history and evolution of Java
    -> Much of the characteristics of Java is derived from C and C++
    -> Trade-offs done while designing a computer language
        * Ease of use versus power
        * Safety versus efficiency
        * Rigidity versus extensiblity
    -> OOP is a programming methodology that helps organize complex programs through the use of inheritance, encapsulation and polymorphism.
    -> Java was conceived by James Gosling, Patrick Naughton, Chris Warth, Ed Frank and Mike Sheridan at the Sun Microsystems in 1991.
    -> It took 18 months to develope the first working version of Java.
    -> Initially named "Oak", in 1995 it was renamed "Java".
    -> Architecture-neutral programming languages like Java became a priority over efficiency with the begin of World Wide Web. This was Java's large-scale success.
    -> Java isnt the enchanced version and also it doesnt replace C++
    -> An applet is a special program that is transmitted over the internet and automatically executed inside a Java-compatible web browser. This locally ran on the client side rather than the server.
    -> Applets became less important and was removed in JDK 11.
    -> The risk of running a networked program was confined to the Java execution environment and prevented it from accessing other parts of the computer.
    -> The bytecode allowed Java to solve both the security and the portability problems. Bytecode is a highly optimized set of instructions designed to be executed by what is called the Java Virtual Machine(JVM), which is a part of JRE.
    -> By allowing the JVM to execute, it can create a restricted execution environment(sandbox), preventing unautherised access to the machine.
    -> Although Java is an interpreted language, nothing can prevent on the fly compilation. HotSpot technology provided a Just In Time(JIT) compiler for bytecode where selected portions of bytecode are compiled into executable code in real time while the rest is simpley interpreted.
    -> Java versions are released every six months being March and September.
    -> A servlet is a small program that executes on the server.
    -> Deallocation is completely automatic, because Java provides garbage collection for unused objects. Hence Java manages memory allocation and deallocation for you.
    -> Buzzwords in Java -
        * Simple
        * Object-Oriented
        * Robust
        * Multithreaded
        * Architecture-Neutral
        * Interpreted and High performance
        * Distributed
        * Dynamic
    ->In JDK 11, JavaFX is no longer included in the JDK. Instead, this GUI framework has become a separate open-source project.

Chapter 2 - An Overview of Java
    -> An object-oriented program can be characterized as data controlling access to code whereas in process-oriented model code acts on data.
    -> Hierarchical abstraction of complex systems is applied in Java.
    -> A class defines the structure and behavior(data and code) that will be shared by a set of objects
    -> Each object of a given class contains the structure and behavior defined by the class. Hence objects are referred to as instances of a class.
    -> The data defined by the class are referred to as member variables or instance variables.
    -> The code that operates on that data is referred to as member methods or just methods.
    -> The private methods and data can only be accessed by code that is a member of the class
    -> Three OOP Principles are - 
        * Encapsulation - Encapsulation is the mechanism that binds together code and the data it manipulates and keeps both safe from outside interference and misuse. Access to the code and data inside the wrapper is tightly controlled through a well-defined interface.
        * Inheritance - It is the process by which one object acquires the properties of another object.
        * Polymorphism - It is a feature that allows one interface to be used for a general class of actions.
    -> In Java, a source file is officially called a compilation unit.
    -> The Java compiler requires that a source file use the .java filename extension.
    -> There are two ways of commenting(comments are non-executable statements) in Java -
        * Single-line comment
        * Multi-line comment
    -> Break down of public static void main(String[] args) {}
        * main() is a special function where the execution of the program begins from it.
        * The public keyword is a access modifier, which allows the programmer to control the visibility of class members.
        * The keyword static allows main() to be called wihtout having to instantiate a particular instance of the class. This is necessary since main() is called by the Java Virtual Machine before any object is created.
        * void tells the compiler that main() doesnt return a value.
        * args is an array of instances of the class String. This identifier receives any command-line arguments present when the program is executed.
        * In System.out.println(), System is a predefined class that provides access to the system and out is the output stream that is connected to the console.
    -> Condition is a boolean expression.(A boolean expression is on that evaluates to either true or false)
    -> There are nearly 61 keywords defined in Java till now

Chapter 3 - Data Types, Variables and Arrays
    -> Java is a strongly typed language.
    -> There are eight primitive types of data: byte, short, int, long, char, float, double and boolean.
    -> The primitive types in Java are not object-oriented due to performance degradation.
    -> Java doesnt support unsigned, positive-integers only.
    -> The range of char is 0 to 65536 and is 16 bit type.
    -> Underscores can be used to separate digits. These underscores will be ignored.
    -> In Java, the floating-point literals default to double precision and integer literals default to int precision.
    -> The scope rules provide the foundation for encapsulation.
    -> A variable declared within a block is called a local variable.
    -> Each time a block of code is created, a new scope is defined. Anything declared within it will be valid only in it.
    -> Truncating is the type conversion when a floating-point is assigned to an integer.
    -> Arrays are a group of like-typed variables referred by a common name.
    -> Jagged array is a 2D array with variable columns.
        ex:
            int[][] arr = new int[3][];
            arr[0] = new int[3];
            arr[1] = new int[2];
            arr[2] = new int[6];
    -> In JDK 10, it is possible to use var keyword in Java
        var avg = 50.6;
    -> While using var to declare an array,
        var arr = new int[5]; // right
        var[] arr = new int[6]; // wrong
        var arr = {1,5,3,2}; // wrong
    -> var can be used only to declare local variables. It cant be used when declaring instance variables, parameters or return types.

Chapter 4 - Operators
    -> Most of its operators can be divided into the following four groups: arithmetic, bitwise, relational and logical
    -> Arithmetic compound addignment operators -
        > a += 4; or a = a + 4;
        > a %= 5; or a = a % 5;
    -> Post-fix and pre-fix operators are different when used in larger expressions
    -> In the prefix form, the operand is incremented or decremented before the value is obtained for use in the expression.
        >x = 43;
        >y = x++; // y = 43
        is equivalent to 
        >y = x;
        >x = x + 1;
    -> In the postfix form, the previous value is obtained for use in the expression and then the operand is modified.
        >x = 43;
        >y = ++x; // y = 44
        is equivalent to 
        >x = x + 1;
        >y=x;
    -> The bit wise operators can be applied to : long, int, short, char and byte
    -> Learn left shift, right shift, negative numbers converted to binary, 1's complement and 2's complement
    -> The outcome of relational operators is a boolean value.
    -> In C/C++, true is any non zero value and false is zero

Chapter 5 - Control statements
    -> Java's program control statements can be put into the following categories:
        * Selection - allow your program to choose different paths of execution based upon the outcome of an expression or state of a variable
        * Iteration - enable program execution to repeat one or more statements.
        * Jump - allow your program to execute in a nonlinear fashion.
    -> Java supports two selection statements: if  and switch
    -> The condition is any expression that returns a boolean value.
    -> The default statement in switch is optional.
    -> If you need to select among a large group of values, a switch statement will run much faster than the equivalent logic coded using a sequence of if-else's.
    -> Java's iteration statements are for, while, and do-while.
    -> The body of the while can be empty. This is because a null statement(one that consists only of a semicolon)
        >while(++i<j--); // no body in this loop
    -> The do-while loop always executes the loop atleast once irrespective of the condition.
    -> The do-while loop is useful when you process a menu selection.
    -> System.in.read() can be used to obtain the user's choice. It return integers hence casting to char in the example below.
        >char choice = (char) System.in.read();
    -> If using System.in.read(), the program must specify the throws java.io.IOException clause.
    -> Either the initialization or the iteration expression or both may be absent in a for loop.
    -> By not filling in any parameters in for loop, you can create an infinite loop;
    -> For each style loop is designed to cycle through a collection of objects, such as an array.
        * syntax:
            >for(type itr-var : collection) statement block;
        * example 1(1D array):
            >int num[] = {1,2,3,4,5,6,7,8,9};
            >int sum = 0;
            >for(int x:sum) sum+=x; // sum of all elements
        * example 2(2D array):
            >int num[][] = {{1,2,3},{1,2,4},{5,6,7}};
            >int sum = 0;
            >for(int x[]:num) {
                for(int y:x) {
                    sum += y;
                }
             } 
    -> For each loop is an excellent choice for searching an unsorted array as it has to go through in sequence.
    -> Java supports three jump statements: break,continue, and return. Java also supports another jump statement i.e exception handling.
    -> Break statement can only break out of one loop.
    -> Break statement can be used as goto statements by using labeled break;
    -> A common use of labeled break statement is to exit from nested loops.
    -> The label should enclose the labeled break to work else it throws an error.
    -> Continue statement causes control to be transferred directly to the conditional expression that controls the loop.
    -> Return causes program control to transfer back to the caller fo the method.

Chapter 6 - Introducing Classes
    -> A class is a template for an object and an object is an instance of a class.
    -> The data or variables defined within a class are called instance variables and the code is contained within methods. Collectively both are called members of the class.
    -> Variables defined within a class are called instance variables because each instance of the class contains its own copy of these variables.
    -> Example:
        class Box{
            double width;
            double height;
            double depth;

            double volume() {
                double vol = myBox.width * myBox.height * myBox.width;
                return vol;
            }
        }
        class BoxDemo{
            public static void main(String[] args) {
                Box myBox = new Box();
                myBox.width = 10;
                myBox.height = 5;
                myBox.width = 5;

                System.out.println(myBox.volume());
            }
        }
        * The new data type is called Box. One can use this to declare objects of type Box.
        * myBox will refer to an instance of Box.
        * To access the variables, use dot(.) operator. The dot operator links the name of the object with the name of an instance variable.
        * The class name followed by parenthese specifies the constructor for the class.
    -> The new operator dynamically allocates memory for an object and returns a reference to it.
    -> Box b1 = new Box();
       Box b2 = b1;
       b1 = null;
       * b1 and b2 will both refer to the same onject. b2 wasnt allocated any memory or copy any part of the b1 object.
       * When you assigned b1 to null it unhooks b1 from the original object without affecting the object or affecting b2.
    -> A constructor initializes an object immediately upon creation. It has no return type.
    -> When using the default constructor, all non-initialized instance variables will have their default values, which is zero, null, and false.
    -> Example(parameterized constructor)
        class Box {
            double width;
            double height;
            double depth;

            //Parameterized constructor
            Box(double width, double height, double depth) {
                // this lets your refer directly to the object, hence resolving any namespace collisions that might occur between instance variable and local variables
                this.width = width; 
                this.height = height;
                this.depth = depth;
            }
        }
        class BoxDemo {
            public static void main(String[] args) {
                Box myBox1 = new myBox(10,20,10);
                Box myBox2 = new myBox(5,4,3);
            }
        }
    -> this can be used inside any method to refer to the current object(this is always a reference to the object on which the method was invoked).
    -> Once the objects are created, deallocation of the memory is handled automatically. The technique that accomplishes this is called garbage collection.
    -> A stack stores data using first-in, last-out ordering.